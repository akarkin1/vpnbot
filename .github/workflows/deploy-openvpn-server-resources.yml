name: Deploy OpenVPN Server ECS Resources

on:
  workflow_dispatch:
    inputs:
      region:
        description: 'AWS Region'
        required: true
      cluster-name:
        description: 'Name Of ECS Cluster, where VPN Server tasks will be hosted'
        required: true
        default: openvpn-server-ecs-cluster
      repostiory-name:
        description: 'Name Of ECR Repository, where a Docker image with VPN Server will be stored'
        required: true
        default: openvpn-server-ecr-repo
      runCfnDeploy:
        description: 'Are CloudFormation resources need to be deployed?'
        required: true
        default: 'yes'
        type: choice
        options:
          - yes
          - no
      runDocker:
        description: 'Is docker build and push required?'
        required: true
        default: 'yes'
        type: choice
        options:
          - yes
          - no

jobs:
  deploy-openvpn-server:
    name: Deploy CloudFormation stack with ECS resources for OpenVPN Server
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Source Code
        if: ${{ github.event.inputs.runDocker == 'yes' || github.event.inputs.runCfnDeploy == 'yes' }}
        uses: actions/checkout@v4
      - name: Configure AWS Credentials
        if: ${{ github.event.inputs.runDocker == 'yes' || github.event.inputs.runCfnDeploy == 'yes' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ github.event.inputs.region }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: Deploy Cloud Formation Stack
        id: deploy-cfn-stack
        if: ${{ github.event.inputs.runCfnDeploy == 'yes' }}
        uses: aws-actions/aws-cloudformation-github-deploy@v1.3.0
        with:
          name: openvpn-ecs-resources-cfn
          template: cloudformation/ecs-vpn-server.yml
          no-fail-on-empty-changeset: "1"
          parameter-overrides: 'EcsClusterName=${{ github.event.inputs.cluster-name }},EcrRepositoryName=${{ github.event.inputs.repostiory-name }}'
      - name: Get ECR Repository Url from created stack
        id: get-ecr-repo-url
        if: ${{ github.event.inputs.runDocker == 'yes' }}
        run: |
          echo "Stack Output Parameters: $(aws cloudformation describe-stacks --stack-name openvpn-ecs-resources-cfn --query 'Stacks[0].Outputs --output json)"
          ECR_REPO_URL=$(aws cloudformation describe-stacks --stack-name openvpn-ecs-resources-cfn --query 'Stacks[0].Outputs[?OutputKey==`EcrRepositoryUrl`].OutputValue' --output text)
          echo "::set-output name=ecr_repo_url::$(echo ${ECR_REPO_URL})"
      - name: Login to Amazon ECR
        id: login-to-ecr
        if: ${{ github.event.inputs.runDocker == 'yes' }}
        uses: aws-actions/amazon-ecr-login@v2
      - name: Build, tag, and push the image to Amazon ECR
        id: build-image
        if: ${{ github.event.inputs.runDocker == 'yes' }}
        env:
          ECR_REGISTRY: ${{ steps.get-ecr-repo-url.outputs.ecr_repo_url }}
          ECR_REPOSITORY: $${{ github.event.inputs.repostiory-name }}
          IMAGE_TAG: ${{ github.run_number }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./docker/
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
