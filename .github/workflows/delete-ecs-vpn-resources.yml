name: Delete ECS VPN Server

on:
  workflow_dispatch:
    inputs:
      region:
        description: 'AWS Region'
        required: true
      ecr-repository-name:
        description: 'Name Of ECR Repository, where Docker images of VPN Server are stored'
        required: true
        default: openvpn-server-ecr-repo

env:
  S3_CONFIG_BUCKET_NAME: ${{ vars.S3_CONFIG_BUCKET_NAME }}
  S3_CONFIG_DIR: ${{ vars.S3_CONFIG_DIR }}
  S3_SUPPORTED_REGIONS_FILE_NAME: ${{ vars.S3_SUPPORTED_REGIONS_FILE_NAME }}
  S3_CONFIG_REGIONS_FILE_URL: s3://${{ vars.S3_CONFIG_BUCKET_NAME }}${{ vars.S3_CONFIG_DIR }}/${{ vars.S3_SUPPORTED_REGIONS_FILE_NAME }}
  S3_CONFIG_BUCKET_REGION: ${{ vars.CONFIG_S3_BUCKET_REGION }}
  STACK_NAME: ${{ vars.ECS_STACK_NAME }}

jobs:
  delete-cloudformation-stack:
    name: Delete CloudFormation stack
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ github.event.inputs.region }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: Clean UP ECR Repository
        if: ${{ github.event.inputs.ecr-repository-name != '' }}
        run: |
          aws ecr batch-delete-image --region ${{ github.event.inputs.region }} \
              --repository-name ${{ github.event.inputs.ecr-repository-name }} \
              --image-ids "$(aws ecr list-images --region ${{ github.event.inputs.region }} \
              --repository-name ${{ github.event.inputs.ecr-repository-name }} \
              --query 'imageIds[*]' --output json \
          )" || true
      - name: Delete CloudFormation Stack
        run: |
          aws cloudformation delete-stack --stack-name ${{ env.STACK_NAME }}
      - name: Update ${{ env.S3_SUPPORTED_REGIONS_FILE_NAME }} In S3
        run: |
          if [ -z $(aws s3api head-object --bucket "${{ env.S3_CONFIG_BUCKET_NAME }}" --key "${{ env.S3_CONFIG_DIR }}/${{ env.S3_SUPPORTED_REGIONS_FILE_NAME }}" >/dev/null 2>&1;) ]; then
            echo "File '${{ env.S3_CONFIG_REGIONS_FILE_URL }}' does not exist. Skipping the step..."
          else
            aws s3 cp ${{ env.S3_CONFIG_REGIONS_FILE_URL }} ./regions.txt --region ${{ env.S3_CONFIG_BUCKET_REGION }}
            grep -v "^${{ github.event.inputs.region }}$" ./regions.txt > ./regions-new.txt
            aws s3 cp ./regions-new.txt ${{ env.S3_CONFIG_REGIONS_FILE_URL }} --region ${{ env.S3_CONFIG_BUCKET_REGION }}
            echo "Region '${{ github.event.inputs.region }}' has been removed from ${{ env.S3_SUPPORTED_REGIONS_FILE_NAME }}"
            echo "Current list of supported regions:"
            cat ./regions-new.txt
            rm ./regions.txt regions-new.txt
          fi
