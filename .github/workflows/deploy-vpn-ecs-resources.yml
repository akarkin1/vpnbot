name: Deploy Tailscale ECS Resources

on:
  workflow_dispatch:
    inputs:
      region:
        description: 'AWS Region'
        required: true
      cluster-name:
        description: 'Name Of ECS Cluster, where VPN Server tasks will be hosted'
        required: true
        default: tailscale-node-ecs-cluster
      repository-name:
        description: 'Name Of ECR Repository, where a Docker image with VPN Server will be stored'
        required: true
        default: tailscale-node-ecr-repo
      run-cfn-deploy:
        description: 'Do CloudFormation resources need to be deployed?'
        required: true
        default: yes
        type: choice
        options:
          - yes
          - no
      run-docker:
        description: 'Is docker build and push required?'
        required: true
        default: yes
        type: choice
        options:
          - yes
          - no

env:
  S3_CONFIG_BUCKET_NAME: ${{ vars.S3_CONFIG_BUCKET_NAME }}
  S3_CONFIG_DIR: ${{ vars.S3_CONFIG_DIR }}
  S3_SUPPORTED_REGIONS_FILE_NAME: ${{ vars.S3_SUPPORTED_REGIONS_FILE_NAME }}
  S3_CONFIG_REGIONS_FILE_URL: s3://${{ vars.S3_CONFIG_BUCKET_NAME }}/${{ vars.S3_CONFIG_DIR }}/${{ vars.S3_SUPPORTED_REGIONS_FILE_NAME }}
  S3_CONFIG_BUCKET_REGION: ${{ vars.CONFIG_BASE_REGION }}
  S3_STACK_OUTPUTS_FILE_NAME: ${{ vars.S3_VPN_SERVER_STACK_OUTPUTS_FILE_NAME }}
  S3_STACK_OUTPUTS_FILE_URL: s3://${{ vars.S3_CONFIG_BUCKET_NAME }}/${{ vars.S3_CONFIG_DIR }}/${{ github.event.inputs.region }}/${{ vars.S3_VPN_SERVER_STACK_OUTPUTS_FILE_NAME }}
  STACK_NAME: ${{ vars.ECS_STACK_NAME }}
  TAILSCALE_AUTH_TOKEN_SECRET_ID: ${{ vars.TAILSCALE_AUTH_TOKEN_SECRET_ID }}
  TAILSCALE_AUTH_TOKEN_REGION: ${{ vars.CONFIG_BASE_REGION }}

jobs:
  # ToDo: docker build and cloudformation template deployment can be run in parallel, if there is no dependency between the formers
  deploy-tailscale-node:
    name: Deploy Tailscale ECS Resources
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Source Code
        if: ${{ github.event.inputs.run-docker == 'true' || github.event.inputs.run-cfn-deploy == 'true' }}
        uses: actions/checkout@v4
      - name: Configure AWS Credentials
        if: ${{ github.event.inputs.run-docker == 'true' || github.event.inputs.run-cfn-deploy == 'true' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ github.event.inputs.region }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: Load Tailscale Auth Token
        if: ${{ github.event.inputs.run-docker == 'true' || github.event.inputs.run-cfn-deploy == 'true' }}
        id: ssm-upload
        run: |
           # Create Tailscale Auth Token Secret, if needed
           if [ $(aws secretsmanager describe-secret --secret-id "${{ env.TAILSCALE_AUTH_TOKEN_SECRET_ID }}" --region ${{ env.TAILSCALE_AUTH_TOKEN_REGION }} >/dev/null 2>&1; echo $?) -ne 0 ]; then
             aws secretsmanager create-secret --name ${{ env.TAILSCALE_AUTH_TOKEN_SECRET_ID }} --secret-string "${{ secrets.TAILSCALE_AUTH_TOKEN }}" --region ${{ env.TAILSCALE_AUTH_TOKEN_REGION }};
           fi
      - name: Deploy Cloud Formation Stack
        id: deploy-cfn-stack
        if: ${{ github.event.inputs.run-cfn-deploy == 'true' }}
        uses: aws-actions/aws-cloudformation-github-deploy@v1.3.0
        with:
          name: ${{ env.STACK_NAME }}
          template: cloudformation/ecs-vpn-server.yml
          no-fail-on-empty-changeset: "1"
          parameter-overrides: 'EcsClusterName=${{ github.event.inputs.cluster-name }},EcrRepositoryName=${{ github.event.inputs.repository-name }},TailscaleAuthTokenSecretId=${{ env.TAILSCALE_AUTH_TOKEN_SECRET_ID }},TailscaleAuthTokenSecretRegion=${{ env.TAILSCALE_AUTH_TOKEN_REGION }}'
      - name: Update Task Configuration In S3
        id: upload-config-to-s3
        if: ${{ github.event.inputs.run-cfn-deploy == 'true' }}
        run: |
          # Save CF Template outputs to S3
          STACK_OUTPUTS=$(aws cloudformation describe-stacks --stack-name ${{ env.STACK_NAME }} --query 'Stacks[0].Outputs' --output json)
          echo "$STACK_OUTPUTS" > ./stack-outputs.json
          aws s3 cp ./stack-outputs.json ${{ env.S3_STACK_OUTPUTS_FILE_URL }} --region ${{ env.S3_CONFIG_BUCKET_REGION }}
          
          # Update regions.txt
          if [ $(aws s3api head-object --bucket "${{ env.S3_CONFIG_BUCKET_NAME }}" --key "${{ env.S3_CONFIG_DIR }}/${{ env.S3_SUPPORTED_REGIONS_FILE_NAME }}" --region ${{ env.S3_CONFIG_BUCKET_REGION }} >/dev/null 2>&1; echo $?) = 0 ]; then
            aws s3 cp "${{ env.S3_CONFIG_REGIONS_FILE_URL }}" ./regions.txt --region "${{ env.S3_CONFIG_BUCKET_REGION }}"
            # If region already exists, remove it first
            grep -v "^${{ github.event.inputs.region }}$" ./regions.txt > ./regions-new.txt
            rm regions.txt
            mv regions-new.txt regions.txt
          else
            touch ./regions.txt
          fi
          
          # Add region
          echo "${{ github.event.inputs.region }}" >> ./regions.txt
          aws s3 cp ./regions.txt "${{ env.S3_CONFIG_REGIONS_FILE_URL }}" --region "${{ env.S3_CONFIG_BUCKET_REGION }}"
      - name: Login to Amazon ECR
        id: login-to-ecr
        if: ${{ github.event.inputs.run-docker == 'true' }}
        uses: aws-actions/amazon-ecr-login@v2
      - name: Build, tag, and push the image to Amazon ECR
        id: build-image
        if: ${{ github.event.inputs.run-docker == 'true' }}
        env:
          ECR_REPOSITORY: ${{ github.event.inputs.repository-name }}
          BUILD_TAG: ${{ github.run_number }}
        run: |
          ECR_REPO_URL=$(aws cloudformation describe-stacks --stack-name ${{ env.STACK_NAME }} --query 'Stacks[0].Outputs[?OutputKey==`EcrRepositoryUrl`].OutputValue' --output text)
           docker build \
            -t $ECR_REPO_URL:$BUILD_TAG \
            -t $ECR_REPO_URL:latest \
            ./docker/;
          docker push $ECR_REPO_URL:$BUILD_TAG
          docker push $ECR_REPO_URL:latest