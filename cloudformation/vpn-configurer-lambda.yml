AWSTemplateFormatVersion: '2010-09-09'
Description: OpenVPN Configurer Lambda Stack

Parameters:
  ClientIPCIDR:
    Type: String
    Default: 0.0.0.0/0
    Description: CIDR IP to be granted access by the SG, use 0.0.0.0/0 to accept all IPs
  LambdaSourcesBucketName:
    Type: String
    Description: S3 Bucket with source code of the lambda.
  # Lambda environment variables
  EnvTgBotToken:
    Type: String
    Description: Telegram Bot Token.
  EnvTgBotUsername:
    Type: String
    Description: Telegram Bot Username.
  EnvPauseBetweenStatusCheckMs:
    Type: Number
    Description: Pause between status check of EC2 instance in milliseconds.
    Default: 500
  EnvOperationWaitTimeoutSec:
    Type: Number
    Description: How much wait in seconds for EC2 operation to complete until timeout.
    Default: 300
  EnvRestartSleepTimeSec:
    Type: Number
    Description: Pause between stop and start operation of EC2 in seconds for /restartServer command.
    Default: 30

Resources:
  VpnConfigurerVpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/27 # 32 Ip Addresses
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: vpn-configurer-vpc
        - Key: ServiceName
          Value: openvpn-server

  VpnConfigurerPrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VpnConfigurerVpc
      CidrBlock: 10.0.0.0/28 # 16 IP addresses
      Tags:
        - Key: Name
          Value: vpn-configurer-private-sn
        - Key: ServiceName
          Value: openvpn-server

  # Create a Public Subnet
  VpnConfigurerPublicSubnet:
    DependsOn:
      - VpnConfigurerVpc
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VpnConfigurerVpc
      CidrBlock: 10.0.0.16/28 # 16 Ip addresses
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: vpn-configurer-public-sn
        - Key: ServiceName
          Value: openvpn-server

  LambdaSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Allow Lambda to access EFS
      VpcId: !Ref VpnConfigurerVpc
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          CidrIp: !Ref ClientIPCIDR
        # Allows outbound HTTP traffic
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref ClientIPCIDR
        # Allow outbound HTTPS traffic
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref ClientIPCIDR
      SecurityGroupIngress:
        # Allow inbound NFS traffic
        - IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          CidrIp: !Ref ClientIPCIDR

  # Configure Internet access for the lambda
  VpnConfigurerInternetGateway:
    Type: AWS::EC2::InternetGateway

  # Attach the Internet Gateway to the VPC
  VpnConfigurerInternetGatewayAttachment:
    DependsOn:
      - VpnConfigurerVpc
      - VpnConfigurerInternetGateway
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VpnConfigurerVpc
      InternetGatewayId: !Ref VpnConfigurerInternetGateway

  # Route Table for NAT Gateway
  VpnConfigurerPublicRouteTable:
    DependsOn:
      - VpnConfigurerVpc
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VpnConfigurerVpc

  # Associate Route Table with Subnet
  VpnConfigurerPublicRouteTableSubnetAssociation:
    DependsOn:
      - VpnConfigurerPublicRouteTable
      - VpnConfigurerPublicSubnet
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref VpnConfigurerPublicSubnet
      RouteTableId: !Ref VpnConfigurerPublicRouteTable

  # Create a Route to the Internet Gateway
  VpnConfigurerInternetGatewayRoute:
    DependsOn:
      - VpnConfigurerPublicRouteTable
      - VpnConfigurerPublicRouteTableSubnetAssociation
      - VpnConfigurerInternetGatewayAttachment
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref VpnConfigurerPublicRouteTable
      DestinationCidrBlock: !Ref ClientIPCIDR
      GatewayId: !Ref VpnConfigurerInternetGateway

  VpnConfigurerEIP:
    Type: AWS::EC2::EIP

  VpnConfigurerNatGateway:
    DependsOn:
      - VpnConfigurerEIP
      - VpnConfigurerPublicSubnet
      - VpnConfigurerInternetGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt VpnConfigurerEIP.AllocationId
      SubnetId: !Ref VpnConfigurerPublicSubnet  # Place NAT Gateway in a public subnet

  # Route Table for NAT Gateway
  VpnConfigurerPrivateRouteTable:
    DependsOn:
      - VpnConfigurerVpc
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VpnConfigurerVpc

  # Associate Route Table with Subnet
  VpnConfigurerPrivateRouteTableSubnetAssociation:
    DependsOn:
      - VpnConfigurerPrivateRouteTable
      - VpnConfigurerPrivateSubnet
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref VpnConfigurerPrivateSubnet
      RouteTableId: !Ref VpnConfigurerPrivateRouteTable

  VpnConfigurerNatGatewayRoute:
    DependsOn:
      - VpnConfigurerPrivateRouteTableSubnetAssociation
      - VpnConfigurerNatGateway
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref VpnConfigurerPrivateRouteTable
      DestinationCidrBlock: !Ref ClientIPCIDR
      NatGatewayId: !Ref VpnConfigurerNatGateway

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: vpn-configurer-lambda-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: vpn-configurer-lambda-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'iam:PassRole'
                Resource:
                  - !Sub "arn:aws:iam::${AWS::AccountId}:role/*"
              - Effect: Allow
                Action:
                  - "s3:GetObject"
                  - "s3:ListBucket"
                Resource: !Sub
                  - arn:aws:s3:::${bucketName}/*
                  - bucketName: !Ref LambdaSourcesBucketName
              # Permissions to manage CW logs
              - Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Effect: Allow
                Resource: "*"
              # Permissions to work with VPC
              - Action:
                  - "ec2:DescribeSubnets"
                  - "ec2:DescribeVpcs"
                  - "ec2:DescribeSecurityGroups"
                  - "ec2:DescribeNetworkInterfaces"
                  - "ec2:CreateNetworkInterface"
                  - "ec2:DeleteNetworkInterface"
                  - "ec2:AssignPrivateIpAddresses"
                  - "ec2:UnassignPrivateIpAddresses"
                Effect: Allow
                Resource: "*"
#              # Permissions to manage EC2 instances
#              - Action:
#                  - "ec2:DescribeInstances"
#                  - "ec2:StopInstances"
#                  - "ec2:RunInstances"
#                  - "ec2:StartInstances"
#                  - "ec2:TerminateInstances"
#                  - "ec2:RebootInstances"
#                Effect: Allow
#                Resource: "*"
              # Permissions to manage ECS instances
              - Action:
                  - "ecs:RunTask"
                  - "ecs:StopTask"
                  - "ecs:DescribeTasks"
                  - "ecs:ListTasks"
                  - "ecs:TagResource"
                  - "tag:GetResources"
                Effect: Allow
                Resource: "*"
              # Permissions to work with S3
              - Action:
                  - "s3:ListBuckets"
                  - "s3:GetObject"
                  - "s3:ListBucket"
                Effect: Allow
                Resource: "*"
              # Permissions to manage EFS file system
              - Action:
                  - "elasticfilesystem:ClientMount"
                  - "elasticfilesystem:ClientWrite"
                  - "elasticfilesystem:ClientRootAccess"
                  - "elasticfilesystem:DescribeFileSystems"
                  - "elasticfilesystem:DescribeMountTargets"
                  - "elasticfilesystem:DescribeAccessPoints"
                Effect: Allow
                Resource: "*"

  LambdaEfsStorage:
    Type: 'AWS::EFS::FileSystem'
    Properties:
      LifecyclePolicies:
        - TransitionToIA: 'AFTER_1_DAY'

  LambdaEfsMountTarget:
    DependsOn:
      - VpnConfigurerPrivateSubnet
      - LambdaSecurityGroup
      - LambdaEfsStorage
    Type: 'AWS::EFS::MountTarget'
    Properties:
      FileSystemId: !Ref LambdaEfsStorage
      SubnetId: !Ref VpnConfigurerPrivateSubnet
      SecurityGroups:
        - !Ref LambdaSecurityGroup

  LambdaEfsAccessPoint:
    DependsOn: LambdaEfsStorage
    Type: AWS::EFS::AccessPoint
    Properties:
      FileSystemId: !Ref LambdaEfsStorage
      PosixUser:
        Gid: '1000'
        Uid: '1000'
      RootDirectory:
        CreationInfo:
          OwnerGid: '1000'
          OwnerUid: '1000'
          Permissions: '750'
        Path: '/vpn-configurer-lambda'

  VpnConfigurerLambda:
    DependsOn:
      - LambdaRole
      - LambdaEfsStorage
      - LambdaSecurityGroup
      - VpnConfigurerPrivateSubnet
      - LambdaEfsMountTarget
      - LambdaEfsAccessPoint
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: openvpn-server-tgbot
      # Old version of the lambda to manage EC2 instances with OpenVpn
#      Handler: org.github.akarkin1.OpenVpnLambdaHandler::handleRequest
      # New version of the lambda to manage ECS tasks with Tailscale
      Handler: org.github.akarkin1.TailscaleVpnLambdaHandler::handleRequest
      Runtime: "java21"
      Role: !GetAtt LambdaRole.Arn
      MemorySize: 1024
      Timeout: 600
      Environment:
        Variables:
          BOT_TOKEN: !Ref EnvTgBotToken
          BOT_USERNAME: !Ref EnvTgBotUsername
#          STATUS_CHECK_PAUSE_MS: !Ref EnvPauseBetweenStatusCheckMs
#          OPERATION_WAIT_TIMEOUT_SEC: !Ref EnvOperationWaitTimeoutSec
#          RESTART_SLEEP_TIME_SEC_ENV: !Ref EnvRestartSleepTimeSec
      FileSystemConfigs:
        - Arn: !GetAtt LambdaEfsAccessPoint.Arn
          LocalMountPath: /mnt/efs
      Code:
        S3Bucket: !Ref LambdaSourcesBucketName
        S3Key: 'openvpn-server-tgbot/vpnbot-1.0-SNAPSHOT.jar'
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt LambdaSecurityGroup.GroupId
        SubnetIds:
          - !Ref VpnConfigurerPrivateSubnet

  LambdaLogGroup:
    DependsOn: VpnConfigurerLambda
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['', ['/aws/lambda/', !Ref VpnConfigurerLambda]]
      RetentionInDays: 7

  # Create API Gateway
  LambdaRestApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: vpn-configurer-api
      ProtocolType: HTTP
      Description: An API Gateway with Vpn Configurer Lambda Integration

  ApiGatewayIamRole:
    DependsOn: VpnConfigurerLambda
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: ""
            Effect: "Allow"
            Principal:
              Service:
                - "apigateway.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: LambdaAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "lambda:*"
                Resource: !GetAtt VpnConfigurerLambda.Arn
        - PolicyName: ApiGatewayAwsLoggingPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/apigateway/*:*
        - PolicyName: ApiGatewayCustomLoggingPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/custom/apigateway/*:*


  LambdaApiGatewayIntegration:
    DependsOn:
      - ApiGatewayIamRole
      - LambdaRestApi
      - VpnConfigurerLambda
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref LambdaRestApi
      Description: TG Bot Vpn Configurer Integration
      ConnectionType: INTERNET
      CredentialsArn: !GetAtt ApiGatewayIamRole.Arn
      PassthroughBehavior: WHEN_NO_MATCH
      TimeoutInMillis: 600
      IntegrationMethod: POST
      IntegrationType: AWS_PROXY
      PayloadFormatVersion: "2.0"
      IntegrationUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${VpnConfigurerLambda.Arn}/invocations"

  ApiGatewayRoute:
    Type: AWS::ApiGatewayV2::Route
    DependsOn:
      - LambdaRestApi
      - VpnConfigurerLambda
      - LambdaApiGatewayIntegration
    Properties:
      ApiId: !Ref LambdaRestApi
      RouteKey: POST /vpn-configurer
      Target: !Join
        - /
        - - integrations
          - !Ref LambdaApiGatewayIntegration

  ApiGatewayDeployment:
    DependsOn:
      - ApiGatewayRoute
      - LambdaApiGatewayIntegration
      - LambdaRestApi
    Type: AWS::ApiGatewayV2::Deployment
    Properties:
      ApiId: !Ref LambdaRestApi
      Description: TG Bot Vpn Configurer Lambda API Deployment

  ApiGatewayStage:
    DependsOn:
      - ApiGatewayDeployment
      - LambdaRestApi
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      DeploymentId: !Ref ApiGatewayDeployment
      Description: TG Bot Vpn Configurer Lambda API v0
      ApiId: !Ref LambdaRestApi
      StageName: "v0"